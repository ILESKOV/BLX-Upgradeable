/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Storage {
  export type LockStruct = {
    startTime: BigNumberish;
    endTime: BigNumberish;
    lockedValue: BigNumberish;
    unlockedValue: BigNumberish;
    claimed: BigNumberish;
  };

  export type LockStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    startTime: BigNumber;
    endTime: BigNumber;
    lockedValue: BigNumber;
    unlockedValue: BigNumber;
    claimed: BigNumber;
  };

  export type BankAccountStruct = {
    createdAt: BigNumberish;
    totalBalance: BigNumberish;
    availableBalance: BigNumberish;
    lockedBalance: BigNumberish;
    transactionsCount: BigNumberish;
    isActive: boolean;
  };

  export type BankAccountStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    createdAt: BigNumber;
    totalBalance: BigNumber;
    availableBalance: BigNumber;
    lockedBalance: BigNumber;
    transactionsCount: BigNumber;
    isActive: boolean;
  };
}

export interface BLXLockerInterface extends utils.Interface {
  functions: {
    "_addressStorage(string)": FunctionFragment;
    "_boolStorage(string)": FunctionFragment;
    "_bytesStorage(string)": FunctionFragment;
    "_initialized()": FunctionFragment;
    "_stringStorage(string)": FunctionFragment;
    "_uintStorage(string)": FunctionFragment;
    "activateBankAccount()": FunctionFragment;
    "addressToBankAccount(address)": FunctionFragment;
    "addressToLocks(address,uint256)": FunctionFragment;
    "claimUnlockedValue(uint256,bytes32,uint256)": FunctionFragment;
    "createTheLock(address,uint32,uint32,bytes32,uint256)": FunctionFragment;
    "deactivateBankAccount()": FunctionFragment;
    "depositTokens(bytes32,uint256)": FunctionFragment;
    "getAllLockedBalance()": FunctionFragment;
    "getAllLocksForSender()": FunctionFragment;
    "getClaimedAmountForLock(uint256)": FunctionFragment;
    "getDataAboutAccount()": FunctionFragment;
    "getGlobalBalanceOfTokens(bytes32)": FunctionFragment;
    "getOwnerAddress()": FunctionFragment;
    "getUnlockedAmountForLock(uint256)": FunctionFragment;
    "globalTokenBalance(bytes32)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "transferToAnotherAccount(address,bytes32,uint256)": FunctionFragment;
    "unPause()": FunctionFragment;
    "whitelistToken(bytes32,address)": FunctionFragment;
    "whitelistedTokens(bytes32)": FunctionFragment;
    "withdrawTokens(bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_addressStorage"
      | "_boolStorage"
      | "_bytesStorage"
      | "_initialized"
      | "_stringStorage"
      | "_uintStorage"
      | "activateBankAccount"
      | "addressToBankAccount"
      | "addressToLocks"
      | "claimUnlockedValue"
      | "createTheLock"
      | "deactivateBankAccount"
      | "depositTokens"
      | "getAllLockedBalance"
      | "getAllLocksForSender"
      | "getClaimedAmountForLock"
      | "getDataAboutAccount"
      | "getGlobalBalanceOfTokens"
      | "getOwnerAddress"
      | "getUnlockedAmountForLock"
      | "globalTokenBalance"
      | "initialize"
      | "owner"
      | "pause"
      | "transferToAnotherAccount"
      | "unPause"
      | "whitelistToken"
      | "whitelistedTokens"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_addressStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_boolStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_bytesStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_stringStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_uintStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "activateBankAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressToBankAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToLocks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimUnlockedValue",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTheLock",
    values: [string, BigNumberish, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateBankAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokens",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllLockedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllLocksForSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimedAmountForLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataAboutAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalBalanceOfTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockedAmountForLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "globalTokenBalance",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferToAnotherAccount",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unPause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistToken",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_addressStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_boolStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_bytesStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_stringStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_uintStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateBankAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToBankAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimUnlockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTheLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateBankAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllLockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllLocksForSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedAmountForLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataAboutAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalBalanceOfTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockedAmountForLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferToAnotherAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "ClaimedTokens(address,uint256,bytes32,uint256)": EventFragment;
    "LockCreated(address,address,bytes32,uint256,uint32,uint32)": EventFragment;
    "TokensDeposit(address,bytes32,uint256)": EventFragment;
    "TokensTransfer(address,address,bytes32,uint256)": EventFragment;
    "TokensWithdraw(address,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdraw"): EventFragment;
}

export interface ClaimedTokensEventObject {
  _sender: string;
  numberOfGivenLock: BigNumber;
  _symbol: string;
  _amount: BigNumber;
}
export type ClaimedTokensEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  ClaimedTokensEventObject
>;

export type ClaimedTokensEventFilter = TypedEventFilter<ClaimedTokensEvent>;

export interface LockCreatedEventObject {
  _sender: string;
  _recipient: string;
  _symbol: string;
  _amount: BigNumber;
  _startTime: number;
  _endTime: number;
}
export type LockCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, number, number],
  LockCreatedEventObject
>;

export type LockCreatedEventFilter = TypedEventFilter<LockCreatedEvent>;

export interface TokensDepositEventObject {
  _sender: string;
  _symbol: string;
  _amount: BigNumber;
}
export type TokensDepositEvent = TypedEvent<
  [string, string, BigNumber],
  TokensDepositEventObject
>;

export type TokensDepositEventFilter = TypedEventFilter<TokensDepositEvent>;

export interface TokensTransferEventObject {
  _sender: string;
  _recipient: string;
  _symbol: string;
  _amount: BigNumber;
}
export type TokensTransferEvent = TypedEvent<
  [string, string, string, BigNumber],
  TokensTransferEventObject
>;

export type TokensTransferEventFilter = TypedEventFilter<TokensTransferEvent>;

export interface TokensWithdrawEventObject {
  _sender: string;
  _symbol: string;
  _amount: BigNumber;
}
export type TokensWithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  TokensWithdrawEventObject
>;

export type TokensWithdrawEventFilter = TypedEventFilter<TokensWithdrawEvent>;

export interface BLXLocker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BLXLockerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _addressStorage(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    _boolStorage(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    _bytesStorage(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    _initialized(overrides?: CallOverrides): Promise<[boolean]>;

    _stringStorage(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    _uintStorage(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    activateBankAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressToBankAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        createdAt: BigNumber;
        totalBalance: BigNumber;
        availableBalance: BigNumber;
        lockedBalance: BigNumber;
        transactionsCount: BigNumber;
        isActive: boolean;
      }
    >;

    addressToLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        lockedValue: BigNumber;
        unlockedValue: BigNumber;
        claimed: BigNumber;
      }
    >;

    claimUnlockedValue(
      _numberOfGivenLock: BigNumberish,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTheLock(
      _assignedAddress: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _symbol: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivateBankAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTokens(
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllLockedBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllLocksForSender(
      overrides?: CallOverrides
    ): Promise<[Storage.LockStructOutput[]]>;

    getClaimedAmountForLock(
      numberOfGivenLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDataAboutAccount(
      overrides?: CallOverrides
    ): Promise<[Storage.BankAccountStructOutput]>;

    getGlobalBalanceOfTokens(
      _symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOwnerAddress(overrides?: CallOverrides): Promise<[string]>;

    getUnlockedAmountForLock(
      numberOfGivenLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    globalTokenBalance(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToAnotherAccount(
      _recipient: string,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistToken(
      _symbol: BytesLike,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedTokens(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawTokens(
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _addressStorage(arg0: string, overrides?: CallOverrides): Promise<string>;

  _boolStorage(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  _bytesStorage(arg0: string, overrides?: CallOverrides): Promise<string>;

  _initialized(overrides?: CallOverrides): Promise<boolean>;

  _stringStorage(arg0: string, overrides?: CallOverrides): Promise<string>;

  _uintStorage(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  activateBankAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressToBankAccount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      createdAt: BigNumber;
      totalBalance: BigNumber;
      availableBalance: BigNumber;
      lockedBalance: BigNumber;
      transactionsCount: BigNumber;
      isActive: boolean;
    }
  >;

  addressToLocks(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      lockedValue: BigNumber;
      unlockedValue: BigNumber;
      claimed: BigNumber;
    }
  >;

  claimUnlockedValue(
    _numberOfGivenLock: BigNumberish,
    _symbol: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTheLock(
    _assignedAddress: string,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _symbol: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivateBankAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTokens(
    _symbol: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllLockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getAllLocksForSender(
    overrides?: CallOverrides
  ): Promise<Storage.LockStructOutput[]>;

  getClaimedAmountForLock(
    numberOfGivenLock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDataAboutAccount(
    overrides?: CallOverrides
  ): Promise<Storage.BankAccountStructOutput>;

  getGlobalBalanceOfTokens(
    _symbol: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwnerAddress(overrides?: CallOverrides): Promise<string>;

  getUnlockedAmountForLock(
    numberOfGivenLock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  globalTokenBalance(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToAnotherAccount(
    _recipient: string,
    _symbol: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unPause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistToken(
    _symbol: BytesLike,
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedTokens(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawTokens(
    _symbol: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _addressStorage(arg0: string, overrides?: CallOverrides): Promise<string>;

    _boolStorage(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    _bytesStorage(arg0: string, overrides?: CallOverrides): Promise<string>;

    _initialized(overrides?: CallOverrides): Promise<boolean>;

    _stringStorage(arg0: string, overrides?: CallOverrides): Promise<string>;

    _uintStorage(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    activateBankAccount(overrides?: CallOverrides): Promise<void>;

    addressToBankAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        createdAt: BigNumber;
        totalBalance: BigNumber;
        availableBalance: BigNumber;
        lockedBalance: BigNumber;
        transactionsCount: BigNumber;
        isActive: boolean;
      }
    >;

    addressToLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        lockedValue: BigNumber;
        unlockedValue: BigNumber;
        claimed: BigNumber;
      }
    >;

    claimUnlockedValue(
      _numberOfGivenLock: BigNumberish,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createTheLock(
      _assignedAddress: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _symbol: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateBankAccount(overrides?: CallOverrides): Promise<void>;

    depositTokens(
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllLockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAllLocksForSender(
      overrides?: CallOverrides
    ): Promise<Storage.LockStructOutput[]>;

    getClaimedAmountForLock(
      numberOfGivenLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataAboutAccount(
      overrides?: CallOverrides
    ): Promise<Storage.BankAccountStructOutput>;

    getGlobalBalanceOfTokens(
      _symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerAddress(overrides?: CallOverrides): Promise<string>;

    getUnlockedAmountForLock(
      numberOfGivenLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalTokenBalance(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_owner: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    transferToAnotherAccount(
      _recipient: string,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unPause(overrides?: CallOverrides): Promise<void>;

    whitelistToken(
      _symbol: BytesLike,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedTokens(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawTokens(
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimedTokens(address,uint256,bytes32,uint256)"(
      _sender?: string | null,
      numberOfGivenLock?: null,
      _symbol?: BytesLike | null,
      _amount?: null
    ): ClaimedTokensEventFilter;
    ClaimedTokens(
      _sender?: string | null,
      numberOfGivenLock?: null,
      _symbol?: BytesLike | null,
      _amount?: null
    ): ClaimedTokensEventFilter;

    "LockCreated(address,address,bytes32,uint256,uint32,uint32)"(
      _sender?: string | null,
      _recipient?: string | null,
      _symbol?: BytesLike | null,
      _amount?: null,
      _startTime?: null,
      _endTime?: null
    ): LockCreatedEventFilter;
    LockCreated(
      _sender?: string | null,
      _recipient?: string | null,
      _symbol?: BytesLike | null,
      _amount?: null,
      _startTime?: null,
      _endTime?: null
    ): LockCreatedEventFilter;

    "TokensDeposit(address,bytes32,uint256)"(
      _sender?: string | null,
      _symbol?: BytesLike | null,
      _amount?: BigNumberish | null
    ): TokensDepositEventFilter;
    TokensDeposit(
      _sender?: string | null,
      _symbol?: BytesLike | null,
      _amount?: BigNumberish | null
    ): TokensDepositEventFilter;

    "TokensTransfer(address,address,bytes32,uint256)"(
      _sender?: string | null,
      _recipient?: string | null,
      _symbol?: BytesLike | null,
      _amount?: null
    ): TokensTransferEventFilter;
    TokensTransfer(
      _sender?: string | null,
      _recipient?: string | null,
      _symbol?: BytesLike | null,
      _amount?: null
    ): TokensTransferEventFilter;

    "TokensWithdraw(address,bytes32,uint256)"(
      _sender?: string | null,
      _symbol?: BytesLike | null,
      _amount?: BigNumberish | null
    ): TokensWithdrawEventFilter;
    TokensWithdraw(
      _sender?: string | null,
      _symbol?: BytesLike | null,
      _amount?: BigNumberish | null
    ): TokensWithdrawEventFilter;
  };

  estimateGas: {
    _addressStorage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _boolStorage(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _bytesStorage(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _initialized(overrides?: CallOverrides): Promise<BigNumber>;

    _stringStorage(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _uintStorage(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    activateBankAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressToBankAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressToLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimUnlockedValue(
      _numberOfGivenLock: BigNumberish,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTheLock(
      _assignedAddress: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _symbol: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivateBankAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTokens(
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllLockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAllLocksForSender(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimedAmountForLock(
      numberOfGivenLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataAboutAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalBalanceOfTokens(
      _symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getUnlockedAmountForLock(
      numberOfGivenLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    globalTokenBalance(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToAnotherAccount(
      _recipient: string,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistToken(
      _symbol: BytesLike,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedTokens(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawTokens(
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _addressStorage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _boolStorage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _bytesStorage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _stringStorage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _uintStorage(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateBankAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressToBankAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressToLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimUnlockedValue(
      _numberOfGivenLock: BigNumberish,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTheLock(
      _assignedAddress: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _symbol: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivateBankAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTokens(
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllLockedBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllLocksForSender(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimedAmountForLock(
      numberOfGivenLock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataAboutAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalBalanceOfTokens(
      _symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnlockedAmountForLock(
      numberOfGivenLock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    globalTokenBalance(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToAnotherAccount(
      _recipient: string,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistToken(
      _symbol: BytesLike,
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedTokens(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
